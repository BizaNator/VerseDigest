using {/Verse.org/Simulation}
# Used to place a campfire in the world that an `agent` can use to heal themselves.
campfire_device<public> := class<concrete><final>(creative_device_base):
    # Signaled when an `agent` enters the area of effect for this device.
    # Sends the entering `agent`.
    AgentEntersEffectAreaEvent<public>:listenable(agent) = external {}

    # Signaled when an `agent` exits the area of effect for this device.
    # Sends the exiting `agent`.
    AgentExitsEffectAreaEvent<public>:listenable(agent) = external {}

    # Signaled when this device generates a pulse.
    CampfirePulseEvent<public>:listenable(tuple()) = external {}

    # Signaled when an `agent` is affected by a pulse generated by this device.
    # Sends the affected `agent`.
    AgentPulsedEvent<public>:listenable(agent) = external {}

    # Signaled when this device is lit by an `agent`.
    # Sends the lighting `agent`.
    LitEvent<public>:listenable(agent) = external {}

    # Signaled when this device is extinguished by an `agent`.
    # Sends the extinguishing `agent`.
    ExtinguishedEvent<public>:listenable(agent) = external {}

    # Signaled when this device is enabled.
    EnabledEvent<public>:listenable(tuple()) = external {}

    # Signaled when this device is disabled.
    DisabledEvent<public>:listenable(tuple()) = external {}

    # Enables this device.
    Enable<public>():void = external {}

    # Disables this device.
    Disable<public>():void = external {}

    # Adds wood to this device.
    AddWood<public>():void = external {}

    # Lights this device.
    Light<public>(Agent:agent):void = external {}

    # Extinguishes this device.
    Extinguish<public>(Agent:agent):void = external {}